[{"/home/ec2-user/chatGPT/demo-chatgpt-frontend/src/index.js":"1","/home/ec2-user/chatGPT/demo-chatgpt-frontend/src/App.js":"2","/home/ec2-user/chatGPT/demo-chatgpt-frontend/src/reportWebVitals.js":"3"},{"size":500,"mtime":1676947186628,"results":"4","hashOfConfig":"5"},{"size":3872,"mtime":1676947186628,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1676947186628,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"5hhwd0",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ec2-user/chatGPT/demo-chatgpt-frontend/src/index.js",[],"/home/ec2-user/chatGPT/demo-chatgpt-frontend/src/App.js",["15","16","17","18","19"],"import React, { Component } from 'react';\nimport styles from \"@chatscope/chat-ui-kit-styles/dist/default/styles.min.css\";\nimport axios from 'axios';\nimport {\n  MainContainer,\n  ChatContainer,\n  MessageList,\n  Message,\n  MessageInput,\n} from \"@chatscope/chat-ui-kit-react\";\nimport { Map, List, Record } from 'immutable';\nimport moment from 'moment';\n\nconst API_GATEWAY_ID = process.env.REACT_APP_API_PATH ? process.env.REACT_APP_API_PATH : \"5yfk3miht8\"\nconst SOCKET_API_GATEWAY_ID = process.env.REACT_APP_SOCKET_API_PATH ? process.env.REACT_APP_SOCKET_API_PATH : \"test\"\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      data: Map(\n        {\n          messageList: [],\n          messages: []\n        })\n    }\n    this.websocket = undefined;\n    this.timer = undefined;\n  }\n  closeWebSocket = () => {\n\n    if (this.timer) {\n      clearInterval(this.timer);\n      this.timer = null;\n    }\n    if (this.websocket) {\n      this.websocket.close();\n      this.websocket = null;\n    }\n  }\n  connectToWebScoket = () => {\n    const address = `wss://${SOCKET_API_GATEWAY_ID}.execute-api.ap-northeast-2.amazonaws.com/dev?user_id=test&room_id=test`\n    this.websocket = new WebSocket(address);\n    this.websocket.onopen = () => {\n      this.timer = setInterval(() => {\n        this.websocket.send(JSON.stringify({ message: 'ping' }));\n      }, 60 * 1000);\n    };\n    this.websocket.onmessage = (message) => {\n      let obj = JSON.parse(message.data);\n      this.onMessageReceived(obj);\n    };\n\n    this.websocket.onclose = (event) => {\n      console.log('onclose');\n      if (this.timer || this.websocket) this.closeWebSocket();\n    };\n\n    this.websocket.onerror = (event) => {\n      console.error('WebSocket error observed:', event);\n      if (this.timer || this.websocket) this.closeWebSocket();\n    };\n  }\n  componentDidMount = async () => {\n    const { data } = this.state;\n    const result = await axios({\n      method: 'GET',\n      url: `https://${API_GATEWAY_ID}.execute-api.ap-northeast-2.amazonaws.com/dev/chat`,\n      params: {\n        room_id: \"test\"\n      }\n    });;\n\n    this.setState({\n      data: data.set(\"messages\", result.data).set(\"user_id\", moment().valueOf())\n    })\n\n    this.connectToWebScoket();\n  }\n  onMessageReceived = async (message) => {\n    console.log(message)\n    if (message.timestamp) {\n      const { data } = this.state;\n      let list = data.get(\"messages\");\n      list.push(message)\n      console.log(list);\n      this.setState({\n        data: data.set(\"messages\", list)\n      })\n    }\n  }\n  onSend = async (message) => {\n    const { data } = this.state;\n    const result = await axios({\n      method: 'PUT',\n      url: `https://${API_GATEWAY_ID}.execute-api.ap-northeast-2.amazonaws.com/dev/chat`,\n      data: {\n        room_id: \"test\",\n        text: message,\n        user_id: data.get(\"user_id\"),\n        name: \"name_test\"\n\n      }\n    });;\n  }\n  getMessageList = () => {\n    const { data } = this.state;\n    const userId = data.get(\"user_id\");\n    let messageList = [];\n    const dt = data.get(\"messages\");\n    if (dt) {\n      dt.forEach((message) => {\n        messageList.push(<Message\n          key={message.timestamp}\n          model={{\n            message: message.message,\n            sentTime: \"just now\",\n            sender: \"Joe\",\n            direction: (userId == message.user_id) ? \"outgoing\" : \"not\",\n          }}\n        />\n        );\n      })\n    }\n    return messageList;\n  }\n\n  render() {\n    return (\n      <div style={{ position: \"relative\", height: \"500px\" }}>\n        <MainContainer>\n          <ChatContainer>\n            <MessageList>\n              {this.getMessageList()}\n            </MessageList>\n            <MessageInput placeholder=\"Type message here\" onSend={this.onSend} />\n          </ChatContainer>\n        </MainContainer>\n      </div>\n    )\n  }\n}\nexport default App;\n","/home/ec2-user/chatGPT/demo-chatgpt-frontend/src/reportWebVitals.js",[],{"ruleId":"20","severity":1,"message":"21","line":2,"column":8,"nodeType":"22","messageId":"23","endLine":2,"endColumn":14},{"ruleId":"20","severity":1,"message":"24","line":11,"column":15,"nodeType":"22","messageId":"23","endLine":11,"endColumn":19},{"ruleId":"20","severity":1,"message":"25","line":11,"column":21,"nodeType":"22","messageId":"23","endLine":11,"endColumn":27},{"ruleId":"20","severity":1,"message":"26","line":94,"column":11,"nodeType":"22","messageId":"23","endLine":94,"endColumn":17},{"ruleId":"27","severity":1,"message":"28","line":119,"column":32,"nodeType":"29","messageId":"30","endLine":119,"endColumn":34},"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","'List' is defined but never used.","'Record' is defined but never used.","'result' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]